version: 2.1


jobs:
  test:
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - linter

      # make install
      - run:
          name: active env
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install

            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint

            hadolint --version
      - save_cache:
          paths:
            - ./venv
          key: linter

      # make lint
      - run:
          name: make lint
          command: |
            . venv/bin/activate
            make lint

  docker-push:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # Creates a remote Docker environment configured to execute Docker commands.
      - setup_remote_docker
      
      - run:
          # installs a docker client that will be used to run the docker commands
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

      - run:
          name: build image docker
          command: |
            docker build --tag=prj5 .
            docker image ls

      - run:
          name: push to Docker Hub
          command: |
            docker login -u "shalltearbloodfallen01" -p "Long3900@"
            docker tag prj5 shalltearbloodfallen01/prj5-deploy:master
            docker push shalltearbloodfallen01/prj5-deploy:master


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      # fix ERROR: tar utility is not present in this image but it is required. Please install it to have workflow workspace capability.
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
            name: stack network
            command: |
              echo ${ENVIRONMENT_NAME}
              aws --region us-east-1 cloudformation deploy \
                --template-file cloudformation/network.yml \
                --tags project=${ENVIRONMENT_NAME} \
                --stack-name "${ENVIRONMENT_NAME}-network" \
                --parameter-overrides file://cloudformation/network-parameters.json

      - run:
          name: stack kubernet
          no_output_timeout: 30m
          command: |
            aws --region us-east-1 cloudformation deploy \
              --template-file cloudformation/kuber.yml \
              --tags project=${ENVIRONMENT_NAME} \
              --stack-name "${ENVIRONMENT_NAME}-kuber" \
              --parameter-overrides file://cloudformation/kuber-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM

      - run:
          name: stack node-group
          no_output_timeout: 30m
          command: |
            aws --region us-east-1 cloudformation deploy \
              --template-file cloudformation/node.yml \
              --tags project=${ENVIRONMENT_NAME}-node \
              --stack-name "${ENVIRONMENT_NAME}-node" \
              --parameter-overrides file://cloudformation/node-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM

      - run:
          name: stack server
          command: |
            aws --region us-east-1 cloudformation deploy \
              --template-file cloudformation/server.yml \
              --tags project=${ENVIRONMENT_NAME} \
              --stack-name "${ENVIRONMENT_NAME}-server" \
              --parameter-overrides file://cloudformation/server-parameters.json

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws --region us-east-1 ec2 describe-instances \
              --query "Reservations[*].Instances[*].[PublicIpAddress]" \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-instance*" \
              --output text >> ~/project/.circleci/ansible/inventory.txt

            echo "IP LIST: "
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["2c:84:c4:d2:e7:8e:df:a6:b5:5a:bc:aa:a1:bf:1d:5c"]
      
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip

      - run:
          no_output_timeout: 60m
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            echo "IP LIST configure:"
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      # - destroy-environment


  configure-cluster:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2c:84:c4:d2:e7:8e:df:a6:b5:5a:bc:aa:a1:bf:1d:5c"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: configure kubernet
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-kuber.yml

      - run:
          name: wating to load
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            echo "Waiting 60s !.."
            sleep 60

      - run:
          name: get lbl dns
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt get-lbl-dns.yml
            cat ~/lbl-dns2.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - lbl-dns2.txt

  deploy-docker:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2c:84:c4:d2:e7:8e:df:a6:b5:5a:bc:aa:a1:bf:1d:5c"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: deploy image docker
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-application.yml


workflows:
  default:
    jobs:
      - test
      - docker-push:
          requires: [test]
          filters:
            branches: 
              only: [ main ]
      - deploy-infrastructure:
          requires: [docker-push]
          filters:
            branches:
              only: [ main ]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - configure-cluster:
          requires: [docker-push, configure-infrastructure]
      - deploy-docker:
          requires: [configure-cluster]


      # - deploy-infrastructure
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - configure-cluster:
      #     requires: [configure-infrastructure]
      # - deploy-docker:
      #     requires: [configure-cluster]


      # - deploy-infrastructure
      # - deploy-docker:
      #     requires: [deploy-infrastructure]
      # - configure-infrastructure
